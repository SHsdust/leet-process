<def f='leetcode/122_best_time_to_trade_stock.cpp' l='6' ll='33'/>
<use f='leetcode/122_best_time_to_trade_stock.cpp' l='40' c='main'/>
<size>1</size>
<def f='leetcode/126_word_ladder_ii.cpp' l='8' ll='78'/>
<size>1</size>
<doc f='leetcode/126_word_ladder_ii.cpp' l='6'>// BFS time limit exceed</doc>
<def f='leetcode/135_candy.cpp' l='7' ll='28'/>
<use f='leetcode/135_candy.cpp' l='36' c='main'/>
<size>1</size>
<def f='leetcode/142_linked_list_cycle.cpp' l='14' ll='37'/>
<use f='leetcode/142_linked_list_cycle.cpp' l='58' c='main'/>
<size>1</size>
<def f='leetcode/154_minimum_in_rotated_sorted_arr.cpp' l='15' ll='34'/>
<use f='leetcode/154_minimum_in_rotated_sorted_arr.cpp' l='40' c='main'/>
<size>1</size>
<doc f='leetcode/154_minimum_in_rotated_sorted_arr.cpp' l='6'>// built-in fun solution
// class Solution {
// public:
//     int findMin(vector&lt;int&gt;&amp; nums) {
//         auto it = min_element(nums.begin(), nums.end());
//         return *it;
//     }
// };</doc>
<def f='leetcode/167_tow_sum.cpp' l='7' ll='31'/>
<use f='leetcode/167_tow_sum.cpp' l='40' c='main'/>
<size>1</size>
<def f='leetcode/215_kth_largest_element.cpp' l='6' ll='55'/>
<use f='leetcode/215_kth_largest_element.cpp' l='64' c='main'/>
<size>1</size>
<def f='leetcode/31_next_permutation.cpp' l='7' ll='13'/>
<use f='leetcode/31_next_permutation.cpp' l='21' c='main'/>
<size>1</size>
<doc f='leetcode/31_next_permutation.cpp' l='6'>// STL Sollution</doc>
<def f='leetcode/347_top_k_frequent_ele.cpp' l='6' ll='27'/>
<use f='leetcode/347_top_k_frequent_ele.cpp' l='33' c='main'/>
<size>1</size>
<def f='leetcode/34_first_and_last_position.cpp' l='6' ll='45'/>
<use f='leetcode/34_first_and_last_position.cpp' l='52' c='main'/>
<size>1</size>
<def f='leetcode/406_queue_reconstruct_by_height.cpp' l='7' ll='56'/>
<use f='leetcode/406_queue_reconstruct_by_height.cpp' l='66' c='main'/>
<size>1</size>
<def f='leetcode/417_plastic_atlantic_water_flow.cpp' l='8' ll='47'/>
<use f='leetcode/417_plastic_atlantic_water_flow.cpp' l='54' c='main'/>
<size>1</size>
<def f='leetcode/435_non_overlapping_intervals.cpp' l='6' ll='21'/>
<use f='leetcode/435_non_overlapping_intervals.cpp' l='30' c='main'/>
<size>1</size>
<def f='leetcode/451_sort_characters_by_freq.cpp' l='8' ll='30'/>
<use f='leetcode/451_sort_characters_by_freq.cpp' l='37' c='main'/>
<size>1</size>
<def f='leetcode/452_minimum_num_of_arrows.cpp' l='7' ll='25'/>
<use f='leetcode/452_minimum_num_of_arrows.cpp' l='34' c='main'/>
<size>1</size>
<doc f='leetcode/452_minimum_num_of_arrows.cpp' l='6'>// similar with prob.435</doc>
<def f='leetcode/455_assign_cookies.cpp' l='6' ll='27'/>
<use f='leetcode/455_assign_cookies.cpp' l='37' c='main'/>
<size>1</size>
<def f='leetcode/46_Permutations.cpp' l='6' ll='25'/>
<use f='leetcode/46_Permutations.cpp' l='31' c='main'/>
<size>1</size>
<def f='leetcode/4_median_of_2_sorted_array.cpp' l='6' ll='11'/>
<use f='leetcode/4_median_of_2_sorted_array.cpp' l='17' c='main'/>
<size>1</size>
<def f='leetcode/51_n_queens.cpp' l='4' ll='33'/>
<use f='leetcode/51_n_queens.cpp' l='37' c='main'/>
<size>1</size>
<def f='leetcode/524_longest_word_in_dictionary.cpp' l='7' ll='55'/>
<use f='leetcode/524_longest_word_in_dictionary.cpp' l='64' c='main'/>
<size>1</size>
<def f='leetcode/540_single_ele_in_sorted_array.cpp' l='5' ll='45'/>
<use f='leetcode/540_single_ele_in_sorted_array.cpp' l='51' c='main'/>
<size>1</size>
<def f='leetcode/547_numbers_of_province.cpp' l='6' ll='29'/>
<use f='leetcode/547_numbers_of_province.cpp' l='36' c='main'/>
<size>1</size>
<def f='leetcode/605_can_place_flowers.cpp' l='6' ll='51'/>
<use f='leetcode/605_can_place_flowers.cpp' l='57' c='main'/>
<size>1</size>
<def f='leetcode/633_sum_of_square_nums.cpp' l='5' ll='16'/>
<use f='leetcode/633_sum_of_square_nums.cpp' l='24' c='main'/>
<size>1</size>
<def f='leetcode/665_non_decreasing_array.cpp' l='8' ll='22'/>
<use f='leetcode/665_non_decreasing_array.cpp' l='28' c='main'/>
<size>1</size>
<doc f='leetcode/665_non_decreasing_array.cpp' l='6'>// interesting, think about different cases in mind;</doc>
<def f='leetcode/680_valid_palindrome_ii.cpp' l='8' ll='32'/>
<use f='leetcode/680_valid_palindrome_ii.cpp' l='37' c='main'/>
<size>1</size>
<def f='leetcode/695_max_area_of_island.cpp' l='44' ll='74'/>
<use f='leetcode/695_max_area_of_island.cpp' l='84' c='main'/>
<size>1</size>
<doc f='leetcode/695_max_area_of_island.cpp' l='11'>// class Solution {
// public:
//     int maxAreaOfIsland(vector&lt;vector&lt;int&gt;&gt;&amp; grid) {
//         int n(grid.size());
//         int m(n ? grid[0].size() : 0);
//         int local_area, area(0), x, y;
//         for(int i=0; i&lt;n; ++i)
//             for(int j=0; j&lt;m; ++j){
//                 if(grid[i][j]){
//                     grid[i][j] = 0;
//                     local_area = 1;
//                     stack&lt;pair&lt;int, int&gt;&gt; island;
//                     island.push({i, j});

//                     while(!island.empty()){
//                         auto [p ,q] = island.top();
//                         island.pop();
//                         for(int k=0; k&lt;4; ++k){
//                             x = p + directions[k], y = q + directions[k+1];
//                             if(x&gt;=0 &amp;&amp; x&lt;n &amp;&amp; y&gt;=0 &amp;&amp; y&lt;m &amp;&amp; grid[x][y]){
//                                 ++local_area;
//                                 grid[x][y] = 0;
//                                 island.push({x, y});
//                             }
//                         }
//                     }
//                     area = max(area, local_area);
//                 }
//             }
//         return area;
//     }
// };</doc>
<def f='leetcode/69_sqrt.cpp' l='42' ll='50'/>
<use f='leetcode/69_sqrt.cpp' l='56' c='main'/>
<size>1</size>
<doc f='leetcode/69_sqrt.cpp' l='6'>// quick solution
// class Solution {
// public:
//     int mySqrt(int x) {
//         return sqrt(x);
//     }
// };

// class Solution{
// public:
//     int mySqrt(int x){
//         // &quot;0&quot; is specialized;

//         size_t l(1), r(x), mid;
//         while(l &lt;= r){
//             // overflow in case 1+2147483647
//             mid = (l + r) / 2;

//             // mid = l + (r-l)/2;

//             // overflow if take (mul == x)
//             size_t sqrt(x / mid);

//             if(sqrt == mid)
//                 return mid;
//             else if(sqrt &gt; mid)
//                 l = mid+1;
//             else
//                 r = mid-1;
//         }
//         return r;
//     }
// };


// Newton&apos;s method</doc>
<def f='leetcode/75_sort_colors.cpp' l='6' ll='24'/>
<use f='leetcode/75_sort_colors.cpp' l='30' c='main'/>
<size>1</size>
<def f='leetcode/763_partition_labels.cpp' l='28' ll='46'/>
<use f='leetcode/763_partition_labels.cpp' l='53' c='main'/>
<size>1</size>
<doc f='leetcode/763_partition_labels.cpp' l='6'>// class Solution {
// public:
//     vector&lt;int&gt; partitionLabels(string s) {
//         int n(s.size());
//         int *last = new int[26];
//         vector&lt;int&gt; result;
//         for(int i=0; i&lt;n; ++i){
//             last[s[i] - &apos;a&apos;] = i;
//         }

//         int tail(0), begin(0);
//         for(int i=0; i&lt;n; ++i){
//             if(tail &lt; last[s[i] - &apos;a&apos;])
//                 tail = last[s[i] - &apos;a&apos;];
//             if(i == tail){
//                 result.push_back(tail - begin + 1);
//                 begin = tail + 1;
//             }
//         }
//         return result;
//     }
// };</doc>
<def f='leetcode/76_minimum_windows_substring.cpp' l='7' ll='40'/>
<use f='leetcode/76_minimum_windows_substring.cpp' l='85' c='main'/>
<size>1</size>
<def f='leetcode/77_Combinations.cpp' l='6' ll='27'/>
<use f='leetcode/77_Combinations.cpp' l='31' c='main'/>
<size>1</size>
<def f='leetcode/79_word_search.cpp' l='4' ll='40'/>
<use f='leetcode/79_word_search.cpp' l='45' c='main'/>
<size>1</size>
<def f='leetcode/81_search_in_rotated_sorted_array.cpp' l='7' ll='32'/>
<use f='leetcode/81_search_in_rotated_sorted_array.cpp' l='39' c='main'/>
<size>1</size>
<doc f='leetcode/81_search_in_rotated_sorted_array.cpp' l='6'>// binary search</doc>
<def f='leetcode/88_merge_sorted_arr.cpp' l='7' ll='35'/>
<use f='leetcode/88_merge_sorted_arr.cpp' l='41' c='main'/>
<size>1</size>
<def f='leetcode/934_shortest_bridge.cpp' l='7' ll='67'/>
<use f='leetcode/934_shortest_bridge.cpp' l='75' c='main'/>
<size>24</size>
<doc f='leetcode/934_shortest_bridge.cpp' l='5'>// BFS</doc>
